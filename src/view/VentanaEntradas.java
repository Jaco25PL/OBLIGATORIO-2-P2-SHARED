/**
 * Autores: [Matias Piedra 354007] y [Joaquin Piedra 304804]
 */
package view;

import controlador.EntradaControlador;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import model.Empleado;
import model.Entrada;
import model.Vehiculo;
import util.ValidadorFechaHora;

public class VentanaEntradas extends javax.swing.JFrame implements PropertyChangeListener{

    private EntradaControlador controlador;
    
    public VentanaEntradas(EntradaControlador controlador) {
        this.controlador = controlador;
        
        initComponents();

        controlador.getSistema().addPropertyChangeListener(this);
        
        actualizarVista();

        jTextFieldFecha.setText(controlador.getFechaActual());
        jTextFieldHora.setText(controlador.getHoraActual());

        ClaroOscuro.aplicarModo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelEntradas = new javax.swing.JPanel();
        jLabelFecha = new javax.swing.JLabel();
        jButtonVaciar = new javax.swing.JButton();
        jButtonAgregar = new javax.swing.JButton();
        jTextFieldFecha = new javax.swing.JTextField();
        jTextFieldHora = new javax.swing.JTextField();
        jLabelHora = new javax.swing.JLabel();
        jScrollPaneVehiculos = new javax.swing.JScrollPane();
        jListVehiculos = new javax.swing.JList<>();
        jScrollPaneEmpleados = new javax.swing.JScrollPane();
        jListEmpleados = new javax.swing.JList<>();
        jLabelEmpleados = new javax.swing.JLabel();
        jLabelNotas = new javax.swing.JLabel();
        jLabelTieneContrato = new javax.swing.JLabel();
        jLabelTieneContratoRespuesta = new javax.swing.JLabel();
        jLabelVehiculos1 = new javax.swing.JLabel();
        jLabelVehiculos2 = new javax.swing.JLabel();
        jLabelFecha1 = new javax.swing.JLabel();
        jLabelFecha2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaNotasEntrada = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Entradas");
        getContentPane().setLayout(null);

        jPanelEntradas.setLayout(null);

        jLabelFecha.setText("hh:mm 24hs");
        jPanelEntradas.add(jLabelFecha);
        jLabelFecha.setBounds(230, 80, 90, 16);

        jButtonVaciar.setText("Vaciar");
        jButtonVaciar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonVaciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVaciarActionPerformed(evt);
            }
        });
        jPanelEntradas.add(jButtonVaciar);
        jButtonVaciar.setBounds(10, 250, 120, 27);

        jButtonAgregar.setText("Agregar");
        jButtonAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarActionPerformed(evt);
            }
        });
        jPanelEntradas.add(jButtonAgregar);
        jButtonAgregar.setBounds(130, 250, 240, 27);
        jPanelEntradas.add(jTextFieldFecha);
        jTextFieldFecha.setBounds(60, 40, 160, 26);
        jPanelEntradas.add(jTextFieldHora);
        jTextFieldHora.setBounds(60, 80, 160, 26);

        jLabelHora.setText("Hora:");
        jPanelEntradas.add(jLabelHora);
        jLabelHora.setBounds(10, 80, 50, 16);

        jListVehiculos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jListVehiculos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListVehiculosValueChanged(evt);
            }
        });
        jScrollPaneVehiculos.setViewportView(jListVehiculos);

        jPanelEntradas.add(jScrollPaneVehiculos);
        jScrollPaneVehiculos.setBounds(380, 40, 180, 100);

        jListEmpleados.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPaneEmpleados.setViewportView(jListEmpleados);

        jPanelEntradas.add(jScrollPaneEmpleados);
        jScrollPaneEmpleados.setBounds(380, 180, 180, 100);

        jLabelEmpleados.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelEmpleados.setText("Lista de Empleados");
        jPanelEntradas.add(jLabelEmpleados);
        jLabelEmpleados.setBounds(380, 150, 130, 16);

        jLabelNotas.setText("Notas:");
        jPanelEntradas.add(jLabelNotas);
        jLabelNotas.setBounds(10, 120, 50, 16);

        jLabelTieneContrato.setText("Tiene Contrato:");
        jPanelEntradas.add(jLabelTieneContrato);
        jLabelTieneContrato.setBounds(10, 200, 120, 16);

        jLabelTieneContratoRespuesta.setText("---");
        jPanelEntradas.add(jLabelTieneContratoRespuesta);
        jLabelTieneContratoRespuesta.setBounds(100, 200, 140, 16);

        jLabelVehiculos1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelVehiculos1.setText("Lista de Vehículos");
        jPanelEntradas.add(jLabelVehiculos1);
        jLabelVehiculos1.setBounds(380, 10, 130, 16);

        jLabelVehiculos2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelVehiculos2.setText("Datos de la Entrada");
        jPanelEntradas.add(jLabelVehiculos2);
        jLabelVehiculos2.setBounds(10, 10, 120, 16);

        jLabelFecha1.setText("Fecha:");
        jPanelEntradas.add(jLabelFecha1);
        jLabelFecha1.setBounds(10, 40, 50, 16);

        jLabelFecha2.setText("dd/mm/yyyy");
        jPanelEntradas.add(jLabelFecha2);
        jLabelFecha2.setBounds(230, 40, 90, 16);

        jTextAreaNotasEntrada.setColumns(20);
        jTextAreaNotasEntrada.setRows(5);
        jScrollPane1.setViewportView(jTextAreaNotasEntrada);

        jPanelEntradas.add(jScrollPane1);
        jScrollPane1.setBounds(60, 120, 160, 70);

        getContentPane().add(jPanelEntradas);
        jPanelEntradas.setBounds(0, 0, 570, 320);

        setBounds(0, 0, 584, 329);
    }// </editor-fold>//GEN-END:initComponents

    private void vehiculoTieneContrato(){
        Vehiculo vehiculo = (Vehiculo) jListVehiculos.getSelectedValue();
        
        if (vehiculo != null) {
            try {
                if(controlador.vehiculoTieneContrato(vehiculo)){
                    jLabelTieneContratoRespuesta.setText("SI");
                } else {
                    jLabelTieneContratoRespuesta.setText("NO");
                }
            } catch (Exception e) {
                ClaroOscuro.mostrarMensaje(this, "Error al cargar datos del vehículo: " + e.getMessage(), "Error");
            }
        }
    }
    
    private void actualizarListaVehiculos() {
        ArrayList<Vehiculo> vehiculos = controlador.getVehiculosDisponiblesParaEntrada();
        jListVehiculos.setListData(vehiculos.toArray());
    }
    
    private void actualizarListaEmpleados() {
        ArrayList<Empleado> empleados = controlador.getListaEmpleados();
        jListEmpleados.setListData(empleados.toArray());
    }

    private void actualizarVista(){
        actualizarListaVehiculos();
        actualizarListaEmpleados();
    }
    
    private void limpiarCampos(){
        jTextFieldFecha.setText("");
        jTextFieldHora.setText("");
        jTextAreaNotasEntrada.setText("");
        jLabelTieneContratoRespuesta.setText("---");
                
        jListVehiculos.clearSelection();
        jListEmpleados.clearSelection();
    }
    
    private void jButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarActionPerformed
        
        try {
            String fecha = jTextFieldFecha.getText();
            String hora = jTextFieldHora.getText();
            String notas = jTextAreaNotasEntrada.getText();

            Empleado empleadoSeleccionado = (Empleado) jListEmpleados.getSelectedValue();
            Vehiculo vehiculoSeleccionado = (Vehiculo) jListVehiculos.getSelectedValue();

            String cedulaEmpleadoStr = "";
            String matriculaVehiculo = "";

            if (empleadoSeleccionado != null) {
                cedulaEmpleadoStr = String.valueOf(empleadoSeleccionado.getCedula());
            }
            if (vehiculoSeleccionado != null) {
                matriculaVehiculo = vehiculoSeleccionado.getMatricula();
            }

            // Validar que los campos no estén vacíos y tengan el formato correcto
            ValidadorFechaHora.validarFecha(fecha);
            ValidadorFechaHora.validarHora(hora);
            
            if (notas == null) { // Las notas pueden estar vacías
                notas = "";
            }
            if (cedulaEmpleadoStr == null || cedulaEmpleadoStr.trim().isEmpty()) {
                throw new Exception("Debe seleccionar un empleado");
            }
            if (matriculaVehiculo == null || matriculaVehiculo.trim().isEmpty()) {
                throw new Exception("Debe seleccionar un vehículo");
            }

            // Convertir cédulas
            int cedulaEmpleado;

            try {
                cedulaEmpleado = Integer.parseInt(cedulaEmpleadoStr);
            } catch (NumberFormatException e) {
                throw new Exception("La cédula del empleado debe ser un número válido");
            }

            // Buscar en sistema
            Empleado empleado = controlador.getSistema().buscarEmpleadoPorCedula(cedulaEmpleado);
            if (empleado == null) {
                throw new Exception("El empleado seleccionado no existe");
            }

            Vehiculo vehiculo = controlador.getSistema().buscarVehiculoPorMatricula(matriculaVehiculo);
            if (vehiculo == null) {
                throw new Exception("El vehículo seleccionado no existe");
            }

            // Verificar unicidad
            if (controlador.getSistema().vehiculoEstaEnParking(matriculaVehiculo)) {
                throw new Exception("El vehículo ya está en el parking");
            }

            // Crear y registrar
            Entrada entrada = new Entrada(0, fecha, hora, notas, empleado, vehiculo);
            boolean resultado = controlador.getSistema().registrarEntrada(entrada);

            if (!resultado) {
                throw new Exception("No se pudo registrar la entrada");
            }

            actualizarListaVehiculos();
            
            // JOptionPane.showMessageDialog(this, "Entrada agregada con éxito");
            ClaroOscuro.mostrarMensaje(this, "Entrada agregada con éxito", "Éxito");

            limpiarCampos();

        } catch (Exception e) {
            // JOptionPane.showMessageDialog(this, e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ClaroOscuro.mostrarError(this,  e.getMessage(), "Error");
            
        }
    }//GEN-LAST:event_jButtonAgregarActionPerformed

    private void jButtonVaciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVaciarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_jButtonVaciarActionPerformed

    private void jListVehiculosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListVehiculosValueChanged
        // TODO add your handling code here:
        if (!evt.getValueIsAdjusting()) {
            vehiculoTieneContrato();
        }
    }//GEN-LAST:event_jListVehiculosValueChanged

    // jTextFieldNotasActionPerformed


    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAgregar;
    private javax.swing.JButton jButtonVaciar;
    private javax.swing.JLabel jLabelEmpleados;
    private javax.swing.JLabel jLabelFecha;
    private javax.swing.JLabel jLabelFecha1;
    private javax.swing.JLabel jLabelFecha2;
    private javax.swing.JLabel jLabelHora;
    private javax.swing.JLabel jLabelNotas;
    private javax.swing.JLabel jLabelTieneContrato;
    private javax.swing.JLabel jLabelTieneContratoRespuesta;
    private javax.swing.JLabel jLabelVehiculos1;
    private javax.swing.JLabel jLabelVehiculos2;
    private javax.swing.JList jListEmpleados;     
    private javax.swing.JList jListVehiculos;     
    private javax.swing.JPanel jPanelEntradas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneEmpleados;
    private javax.swing.JScrollPane jScrollPaneVehiculos;
    private javax.swing.JTextArea jTextAreaNotasEntrada;
    private javax.swing.JTextField jTextFieldFecha;
    private javax.swing.JTextField jTextFieldHora;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        // TODO Auto-generated method stub
        String propertyName = evt.getPropertyName();

        if ("vehiculoCreado".equals(propertyName) || "vehiculoEliminado".equals(propertyName)) {
            actualizarListaVehiculos();
        } else if ("empleadoCreado".equals(propertyName) || "empleadoEliminado".equals(propertyName)) {
            actualizarListaEmpleados();
        } else if ("entradaCreada".equals(propertyName)) {
            actualizarListaVehiculos();
        } else if ("salidaCreada".equals(propertyName)) {
            actualizarListaVehiculos();
        } else if ("contratoCreado".equals(propertyName) || "contratoEliminado".equals(propertyName)) {
            if (jListVehiculos.getSelectedValue() != null) {
                vehiculoTieneContrato();
            }
        }
    }


}
