/**
 * Autores: [Matias Piedra 354007] y [Joaquin Piedra 304804]
 */
package view;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.time.LocalDate;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import model.Cliente;
import model.Sistema;

public class VentanaGestionClientes extends javax.swing.JFrame implements PropertyChangeListener{
    
    private Sistema sistema;
    
    public VentanaGestionClientes(Sistema sistema) {
        this.sistema = sistema;
        
        initComponents();
        
        // Registrar como listener
        sistema.addPropertyChangeListener(this);

        jPanelGestionClientes.setBounds(0,0, this.getWidth(), this.getHeight());
        
        actualizarVista();
        
        ClaroOscuro.aplicarModo(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelGestionClientes = new javax.swing.JPanel();
        jLabelNombre = new javax.swing.JLabel();    
        jLabelDireccion = new javax.swing.JLabel();
        jLabelCelular = new javax.swing.JLabel();
        jLabelCedula = new javax.swing.JLabel();
        jLabelAño = new javax.swing.JLabel();
        jLabelClientes = new javax.swing.JLabel();
        jButtonVaciar = new javax.swing.JButton();
        jButtonAgregar = new javax.swing.JButton();
        jButtonEliminar = new javax.swing.JButton();
        jTextFieldNombre = new javax.swing.JTextField();
        jTextFieldDireccion = new javax.swing.JTextField();
        jTextFieldCelular = new javax.swing.JTextField();
        jTextFieldCedula = new javax.swing.JTextField();
        jTextFieldAñoCliente = new javax.swing.JTextField();
        jScrollPaneClientes = new javax.swing.JScrollPane();
        jListClientes = new javax.swing.JList<>();
                jListClientes.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListClientesValueChanged(evt);
            }
        });
        jLabelClientes1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestión de Clientes");
        getContentPane().setLayout(null);

        jPanelGestionClientes.setLayout(null);

        jLabelNombre.setText("Nombre:");
        jPanelGestionClientes.add(jLabelNombre);
        jLabelNombre.setBounds(10, 40, 60, 16);

        jLabelDireccion.setText("Direccion:");
        jPanelGestionClientes.add(jLabelDireccion);
        jLabelDireccion.setBounds(10, 120, 60, 16);

        jLabelCelular.setText("Celular:");
        jPanelGestionClientes.add(jLabelCelular);
        jLabelCelular.setBounds(10, 160, 60, 16);

        jLabelCedula.setText("Cédula:");
        jPanelGestionClientes.add(jLabelCedula);
        jLabelCedula.setBounds(10, 80, 50, 16);

        jLabelAño.setText("Año Cliente:");
        jPanelGestionClientes.add(jLabelAño);
        jLabelAño.setBounds(10, 200, 70, 16);

        jLabelClientes.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelClientes.setText("Datos del Cliente");
        jPanelGestionClientes.add(jLabelClientes);
        jLabelClientes.setBounds(10, 10, 110, 16);

        jButtonVaciar.setText("Vaciar");
        jButtonVaciar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonVaciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVaciarActionPerformed(evt);
            }
        });
        jPanelGestionClientes.add(jButtonVaciar);
        jButtonVaciar.setBounds(10, 250, 120, 27);

        jButtonAgregar.setText("Agregar");
        jButtonAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarActionPerformed(evt);
            }
        });
        jPanelGestionClientes.add(jButtonAgregar);
        jButtonAgregar.setBounds(130, 250, 120, 27);

        jButtonEliminar.setText("Eliminar");
        jButtonEliminar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEliminarActionPerformed(evt);
            }
        });
        jPanelGestionClientes.add(jButtonEliminar);
        jButtonEliminar.setBounds(250, 250, 120, 27);
        jPanelGestionClientes.add(jTextFieldNombre);
        jTextFieldNombre.setBounds(90, 40, 160, 26);
        jPanelGestionClientes.add(jTextFieldDireccion);
        jTextFieldDireccion.setBounds(90, 120, 160, 26);
        jPanelGestionClientes.add(jTextFieldCelular);
        jTextFieldCelular.setBounds(90, 160, 160, 26);
        jPanelGestionClientes.add(jTextFieldCedula);
        jTextFieldCedula.setBounds(90, 80, 160, 26);
        jPanelGestionClientes.add(jTextFieldAñoCliente);
        jTextFieldAñoCliente.setBounds(90, 200, 160, 26);

        jListClientes.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPaneClientes.setViewportView(jListClientes);

        jPanelGestionClientes.add(jScrollPaneClientes);
        jScrollPaneClientes.setBounds(380, 40, 180, 240);

        jLabelClientes1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelClientes1.setText("Lista de Clientes");
        jPanelGestionClientes.add(jLabelClientes1);
        jLabelClientes1.setBounds(380, 10, 100, 16);

        getContentPane().add(jPanelGestionClientes);
        jPanelGestionClientes.setBounds(0, 0, 570, 320);

        setBounds(0, 0, 584, 329);
    }// </editor-fold>//GEN-END:initComponents

    private void jListClientesValueChanged(javax.swing.event.ListSelectionEvent evt) {
        if (!evt.getValueIsAdjusting()) {
            mostrarClienteSeleccionado();
        }
    }

    private void mostrarClienteSeleccionado() {
        Cliente cliente = (Cliente) jListClientes.getSelectedValue();

        if (cliente != null) {
            try {
                jTextFieldNombre.setText(cliente.getNombre());
                jTextFieldCedula.setText(String.valueOf(cliente.getCedula()));
                jTextFieldDireccion.setText(cliente.getDireccion());
                jTextFieldCelular.setText(String.valueOf(cliente.getCelular()));
                jTextFieldAñoCliente.setText(String.valueOf(cliente.getAñoCliente()));
            } catch (Exception e) {
                ClaroOscuro.mostrarError(this, "Error al cargar datos del cliente: " + e.getMessage(), "Error");
            }
        }
    }

    private void actualizarListaClientes(){
        ArrayList<Cliente> clientes = sistema.getListaClientes();
        jListClientes.setListData(clientes.toArray());
    }

    private void actualizarVista(){
        actualizarListaClientes();
    }

    private void jButtonEliminarActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            Cliente clienteSeleccionado = (Cliente) jListClientes.getSelectedValue();
            
            if (clienteSeleccionado == null) {
                ClaroOscuro.mostrarAdvertencia(this, "Debe seleccionar un cliente para eliminar", 
                    "Selección requerida");
                return;
            }
            
            int cedula = clienteSeleccionado.getCedula();
            
            int confirmacion = ClaroOscuro.mostrarConfirmacion(this,
                    "¿Está seguro que desea eliminar este cliente?\nEsto eliminará también todos sus contratos.", 
                    "Confirmar eliminación");
            
            if (confirmacion == JOptionPane.YES_OPTION) {
                // Verificar que el cliente existe
                if (!sistema.existeClienteConCedula(cedula)) {
                    throw new Exception("No existe un cliente con esa cédula");
                }
                
                boolean resultado = sistema.eliminarCliente(cedula);
                
                if (!resultado) {
                    throw new Exception("No se pudo eliminar el cliente");
                }
                
                actualizarListaClientes();
                ClaroOscuro.mostrarMensaje(this, "Cliente eliminado con éxito", "Éxito");
                limpiarCampos();
            }
        } catch (Exception e) {
            ClaroOscuro.mostrarError(this, e.getMessage(), "Error");
        }
    }//GEN-LAST:event_jButtonEliminarActionPerformed

    private void jButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarActionPerformed

        try {
            String nombre = jTextFieldNombre.getText();
            String cedulaStr = jTextFieldCedula.getText();
            String direccion = jTextFieldDireccion.getText();
            String celularStr = jTextFieldCelular.getText();
            String añoClienteStr = jTextFieldAñoCliente.getText();

            // Validar que los campos no estén vacíos
            if (nombre == null || nombre.trim().isEmpty()) {
                throw new Exception("El nombre no puede estar vacío");
            } 
            if (direccion == null || direccion.trim().isEmpty()) {
                throw new Exception("La dirección no puede estar vacía");
            } 
            if (cedulaStr == null || cedulaStr.trim().isEmpty()) {
                throw new Exception("La cédula no puede estar vacía");
            } 
            if (celularStr == null || celularStr.trim().isEmpty()) {
                throw new Exception("El celular no puede estar vacío");
            } 
            if (añoClienteStr == null || añoClienteStr.trim().isEmpty()) {
                throw new Exception("El año no puede estar vacío");
            }
            
            // Convertir strings a números
            int cedula;
            int celular;
            int añoCliente;
            
            try {
                cedula = Integer.parseInt(cedulaStr);
            } catch (NumberFormatException e){
                throw new Exception("La cédula debe ser un número válido");
            }
            try {
                celular = Integer.parseInt(celularStr);
            } catch (NumberFormatException e){
                throw new Exception("El celular debe ser un número válido");
            }
            try {
                añoCliente = Integer.parseInt(añoClienteStr);
            } catch (NumberFormatException e){
                throw new Exception("El año debe ser un número válido");
            }
            
            // Validar valores numéricos
            if (cedula <= 0) {
                throw new Exception("La cédula debe ser un número positivo");
            }
            if (celular <= 0) {
                throw new Exception("El celular debe ser un número positivo");
            }
            if (añoCliente <= 0 || añoCliente > LocalDate.now().getYear()) {
                throw new Exception("El año debe ser válido");
            }
            
            // Verificar cliente existente
            if (sistema.existeClienteConCedula(cedula)) {
                throw new Exception("Ya existe un cliente con esa cédula");
            }
            
            // Crear y registrar cliente
            Cliente cliente = new Cliente(nombre, cedula, direccion, celular, añoCliente);
            boolean resultado = sistema.registrarCliente(cliente);
            
            if (!resultado) {
                throw new Exception("No se pudo registrar el cliente");
            }

            actualizarListaClientes();
            
            ClaroOscuro.mostrarMensaje(this, "Cliente agregado con éxito", "Éxito");
            
            limpiarCampos();
            
        } catch (Exception e) {
            ClaroOscuro.mostrarError(this, e.getMessage(), "Error");
        }
        
    }//GEN-LAST:event_jButtonAgregarActionPerformed

    private void limpiarCampos() {
        jTextFieldNombre.setText("");
        jTextFieldCedula.setText("");
        jTextFieldDireccion.setText("");
        jTextFieldCelular.setText("");
        jTextFieldAñoCliente.setText("");
        
        jListClientes.clearSelection();
    }

    private void jButtonVaciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVaciarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_jButtonVaciarActionPerformed

    // Implementar todos los métodos de SistemaObserver:
    // @Override
    // public void onClienteEliminado() {
    //     actualizarListaClientes(); // ¡Actualizar cuando se elimina un cliente!
    // }

    // @Override
    // public void onClienteCreado() {
    //     actualizarListaClientes(); // ¡Actualizar cuando se crea un cliente!
    // }

    // @Override
    // public void onVehiculoEliminado() {
    //     // No necesita hacer nada
    // }

    // @Override
    // public void onVehiculoCreado() {
    //     // No necesita hacer nada
    // }

    // @Override
    // public void onEmpleadoEliminado() {
    //     // No necesita hacer nada
    // }

    // @Override
    // public void onEmpleadoCreado() {
    //     // No necesita hacer nada
    // }

    // @Override
    // public void onContratoEliminado() {
    //     // No necesita hacer nada
    // }

    // @Override
    // public void onContratoCreado() {
    //     // No necesita hacer nada
    // }

    // @Override
    // public void onEntradaCreada() {
    //     // No necesita hacer nada
    // }

    // @Override
    // public void onSalidaCreada() {
    //     // No necesita hacer nada
    // }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAgregar;
    private javax.swing.JButton jButtonEliminar;
    private javax.swing.JButton jButtonVaciar;
    private javax.swing.JLabel jLabelAño;
    private javax.swing.JLabel jLabelCedula;
    private javax.swing.JLabel jLabelCelular;
    private javax.swing.JLabel jLabelClientes;
    private javax.swing.JLabel jLabelClientes1;
    private javax.swing.JLabel jLabelDireccion;
    private javax.swing.JLabel jLabelNombre;
    private javax.swing.JList jListClientes; // Sin <String>
    private javax.swing.JPanel jPanelGestionClientes;
    private javax.swing.JScrollPane jScrollPaneClientes;
    private javax.swing.JTextField jTextFieldAñoCliente;
    private javax.swing.JTextField jTextFieldCedula;
    private javax.swing.JTextField jTextFieldCelular;
    private javax.swing.JTextField jTextFieldDireccion;
    private javax.swing.JTextField jTextFieldNombre;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        // TODO Auto-generated method stub
        
        String evento = evt.getPropertyName();
        if ("clienteCreado".equals(evento) || "clienteEliminado".equals(evento)) {
            actualizarListaClientes();
        }


    }
}
