/**
 * Autores: [Matias Piedra 354007] y [Joaquin Piedra 304804]
 */
package view;

import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import model.Cliente;
import model.Contrato;
import model.Empleado;
import model.Sistema;
import model.Vehiculo;
import util.ValidadorFechaHora;

public class VentanaGestionContratos extends javax.swing.JFrame implements PropertyChangeListener{

    private Sistema sistema;

        public VentanaGestionContratos(Sistema sistema) {
            this.sistema = sistema;
            
            initComponents();

            sistema.addPropertyChangeListener(this);

            actualizarListaContratos();
            actualizarListaClientes();
            actualizarListaEmpleados();
            actualizarListaVehiculos();

            ClaroOscuro.aplicarModo(this);

            jTextFieldFechaInicio.setText(ValidadorFechaHora.getFechaActual());

        }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelGestionContratos = new javax.swing.JPanel();
        jLabelFechaInicio = new javax.swing.JLabel();
        jLabelContratos = new javax.swing.JLabel();
        jButtonVaciar = new javax.swing.JButton();
        jButtonAgregar = new javax.swing.JButton();
        jTextFieldFechaInicio = new javax.swing.JTextField();
        jScrollPaneContratos = new javax.swing.JScrollPane();
        jListContratos = new javax.swing.JList<>();
        jTextFieldValorMensual = new javax.swing.JTextField();
        jLabelValorMensual = new javax.swing.JLabel();
        jScrollPaneClientes = new javax.swing.JScrollPane();
        jListClientes = new javax.swing.JList<>();
        jLabelClientes = new javax.swing.JLabel();
        jScrollPaneVehiculos = new javax.swing.JScrollPane();
        jListVehiculos = new javax.swing.JList<>();
        jLabelVehiculos = new javax.swing.JLabel();
        jScrollPaneEmpleados = new javax.swing.JScrollPane();
        jListEmpleados = new javax.swing.JList<>();
        
        jLabelEmpleados = new javax.swing.JLabel();
        jTextFieldEmpleado = new javax.swing.JTextField();
        jTextFieldVehiculo = new javax.swing.JTextField();
        jTextFieldCliente = new javax.swing.JTextField();
        jTextFieldNumContrato = new javax.swing.JTextField();
        jLabelContratos1 = new javax.swing.JLabel();
        jLabelContratos2 = new javax.swing.JLabel();
        jLabelContratos3 = new javax.swing.JLabel();
        jLabelContratos4 = new javax.swing.JLabel();
        jLabelContratos5 = new javax.swing.JLabel();
        jLabelContratos6 = new javax.swing.JLabel();
        jLabelClientes1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Gestión de Contratos");
        getContentPane().setLayout(null);

        jPanelGestionContratos.setLayout(null);

        jListContratos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListContratosValueChanged(evt);
            }
        });

        jLabelFechaInicio.setText("Fecha Inicio:");
        jPanelGestionContratos.add(jLabelFechaInicio);
        jLabelFechaInicio.setBounds(10, 30, 70, 16);

        jLabelContratos.setText("N° Contrato:");
        jPanelGestionContratos.add(jLabelContratos);
        jLabelContratos.setBounds(380, 250, 70, 16);

        jButtonVaciar.setText("Vaciar");
        jButtonVaciar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonVaciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVaciarActionPerformed(evt);
            }
        });
        jPanelGestionContratos.add(jButtonVaciar);
        jButtonVaciar.setBounds(10, 250, 120, 27);

        jButtonAgregar.setText("Agregar");
        jButtonAgregar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButtonAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAgregarActionPerformed(evt);
            }
        });
        jPanelGestionContratos.add(jButtonAgregar);
        jButtonAgregar.setBounds(130, 250, 240, 27);
        jPanelGestionContratos.add(jTextFieldFechaInicio);
        jTextFieldFechaInicio.setBounds(100, 30, 160, 26);

        jScrollPaneContratos.setViewportView(jListContratos);

        jPanelGestionContratos.add(jScrollPaneContratos);
        jScrollPaneContratos.setBounds(380, 30, 180, 100);
        jPanelGestionContratos.add(jTextFieldValorMensual);
        jTextFieldValorMensual.setBounds(100, 60, 160, 26);

        jLabelValorMensual.setText("Valor Mensual:");
        jPanelGestionContratos.add(jLabelValorMensual);
        jLabelValorMensual.setBounds(10, 60, 90, 16);

        jScrollPaneClientes.setViewportView(jListClientes);

        jPanelGestionContratos.add(jScrollPaneClientes);
        jScrollPaneClientes.setBounds(10, 130, 120, 110);

        jLabelClientes.setText("Seleccione:");
        jPanelGestionContratos.add(jLabelClientes);
        jLabelClientes.setBounds(10, 90, 70, 16);

        jScrollPaneVehiculos.setViewportView(jListVehiculos);

        jPanelGestionContratos.add(jScrollPaneVehiculos);
        jScrollPaneVehiculos.setBounds(130, 130, 120, 110);

        jLabelVehiculos.setText("Vehiculos");
        jPanelGestionContratos.add(jLabelVehiculos);
        jLabelVehiculos.setBounds(130, 110, 60, 16);

        jScrollPaneEmpleados.setViewportView(jListEmpleados);

        jPanelGestionContratos.add(jScrollPaneEmpleados);
        jScrollPaneEmpleados.setBounds(250, 130, 120, 110);

        jLabelEmpleados.setText("Empleados");
        jPanelGestionContratos.add(jLabelEmpleados);
        jLabelEmpleados.setBounds(250, 110, 60, 16);
        jPanelGestionContratos.add(jTextFieldEmpleado);
        jTextFieldEmpleado.setBounds(450, 220, 110, 26);
        jPanelGestionContratos.add(jTextFieldVehiculo);
        jTextFieldVehiculo.setBounds(450, 190, 110, 26);
        jPanelGestionContratos.add(jTextFieldCliente);
        jTextFieldCliente.setBounds(450, 160, 110, 26);
        jPanelGestionContratos.add(jTextFieldNumContrato);
        jTextFieldNumContrato.setBounds(450, 250, 110, 26);

        jLabelContratos1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelContratos1.setText("Datos del Contrato");
        jPanelGestionContratos.add(jLabelContratos1);
        jLabelContratos1.setBounds(10, 10, 120, 16);

        jLabelContratos2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelContratos2.setText("Lista de Contratos Existentes");
        jPanelGestionContratos.add(jLabelContratos2);
        jLabelContratos2.setBounds(380, 10, 170, 16);

        jLabelContratos3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelContratos3.setText("Datos del Seleccionado");
        jPanelGestionContratos.add(jLabelContratos3);
        jLabelContratos3.setBounds(380, 140, 140, 16);

        jLabelContratos4.setText("Cliente:");
        jPanelGestionContratos.add(jLabelContratos4);
        jLabelContratos4.setBounds(380, 160, 50, 16);

        jLabelContratos5.setText("Vehículo:");
        jPanelGestionContratos.add(jLabelContratos5);
        jLabelContratos5.setBounds(380, 190, 60, 16);

        jLabelContratos6.setText("Empleado:");
        jPanelGestionContratos.add(jLabelContratos6);
        jLabelContratos6.setBounds(380, 220, 70, 16);

        jLabelClientes1.setText("Clientes");
        jPanelGestionContratos.add(jLabelClientes1);
        jLabelClientes1.setBounds(10, 110, 60, 16);

        getContentPane().add(jPanelGestionContratos);
        jPanelGestionContratos.setBounds(0, 0, 570, 320);

        setBounds(0, 0, 584, 329);
    }// </editor-fold>//GEN-END:initComponents

    public void mostrarContratoSeleccionado() {
        Contrato contrato = (Contrato) jListContratos.getSelectedValue();
        
        if (contrato != null) {
            try {
                jTextFieldValorMensual.setText(String.valueOf(contrato.getValorMensual()));
                jTextFieldFechaInicio.setText(String.valueOf(contrato.getFechaInicio()));
                jTextFieldCliente.setText(contrato.getClienteContrato().getNombre() + " - " + contrato.getClienteContrato().getCedula());
                jTextFieldVehiculo.setText(contrato.getVehiculoContrato().getMarca() + " " + contrato.getVehiculoContrato().getModelo() 
                    + " - " + contrato.getVehiculoContrato().getMatricula());
                jTextFieldEmpleado.setText(contrato.getEmpleadoContrato().getNombre() + " - " + contrato.getEmpleadoContrato().getCedula());
                jTextFieldNumContrato.setText(String.valueOf(contrato.getNumContrato()));
            } catch (Exception e) {
                ClaroOscuro.mostrarMensaje(this, "Error al cargar datos del contrato: " + e.getMessage(), 
                "Error");
            }
        }
    }
    
    private void limpiarCampos() {
        jTextFieldValorMensual.setText("");
        jTextFieldFechaInicio.setText("");
        jTextFieldCliente.setText("");
        jTextFieldVehiculo.setText("");
        jTextFieldEmpleado.setText("");
        jTextFieldNumContrato.setText("");
        
        jListContratos.clearSelection();
        jListEmpleados.clearSelection();
        jListClientes.clearSelection();
        jListVehiculos.clearSelection();
    }
    
    private void actualizarListaEmpleados(){
        ArrayList<Empleado> empleados = sistema.getListaEmpleados();
        jListEmpleados.setListData(empleados.toArray());
    }

    private void actualizarListaClientes(){
        ArrayList<Cliente> clientes = sistema.getListaClientes();
        jListClientes.setListData(clientes.toArray());
    }
    
    private void actualizarListaVehiculos() {
        ArrayList<Vehiculo> vehiculos = sistema.getListaVehiculos();
        jListVehiculos.setListData(vehiculos.toArray());
    }
    
    private void actualizarListaContratos() {
        ArrayList<Contrato> contratos = sistema.getListaContratos();
        jListContratos.setListData(contratos.toArray());
    }
    
    private void jButtonAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAgregarActionPerformed
    
        try {
            String valorMensualStr = jTextFieldValorMensual.getText();
            String fechaInicio = jTextFieldFechaInicio.getText();
            
            Empleado empleadoSeleccionado = (Empleado) jListEmpleados.getSelectedValue();
            Cliente clienteSeleccionado = (Cliente) jListClientes.getSelectedValue();
            Vehiculo vehiculoSeleccionado = (Vehiculo) jListVehiculos.getSelectedValue();
            
            String cedulaEmpleadoStr = "";
            String cedulaClienteStr = "";
            String matriculaVehiculo = "";
            
            if (empleadoSeleccionado != null) {
                cedulaEmpleadoStr = String.valueOf(empleadoSeleccionado.getCedula());
            }
            if (clienteSeleccionado != null) {
                cedulaClienteStr = String.valueOf(clienteSeleccionado.getCedula());
            }
            if (vehiculoSeleccionado != null) {
                matriculaVehiculo = vehiculoSeleccionado.getMatricula();
            }
            
            // Validar que los campos no estén vacíos
            if (valorMensualStr == null || valorMensualStr.trim().isEmpty()) {
                throw new Exception("El valor mensual no puede estar vacío");
            }
            if (cedulaEmpleadoStr == null || cedulaEmpleadoStr.trim().isEmpty()) {
                throw new Exception("Debe seleccionar un empleado");
            }
            if (cedulaClienteStr == null || cedulaClienteStr.trim().isEmpty()) {
                throw new Exception("Debe seleccionar un cliente");
            }
            if (matriculaVehiculo == null || matriculaVehiculo.trim().isEmpty()) {
                throw new Exception("Debe seleccionar un vehículo");
            }

            //Validar fecha
            ValidadorFechaHora.validarFecha(fechaInicio);

            // Convertir strings a números
            double valorMensual;

            try {
                valorMensual = Double.parseDouble(valorMensualStr);
            } catch (NumberFormatException e) {
                throw new Exception("El valor mensual debe ser un número válido");
            }

            // Validar valores numéricos
            if (valorMensual <= 0) {
                throw new Exception("El valor mensual debe ser mayor a cero");
            }

            // Convertir cédulas
            int cedulaEmpleado; 
            int cedulaCliente;
            
            try {
                cedulaEmpleado = Integer.parseInt(cedulaEmpleadoStr);
            } catch (NumberFormatException e) {
                throw new Exception("La cédula del empleado debe ser un número válido");
            }
            try {
                cedulaCliente = Integer.parseInt(cedulaClienteStr);
            } catch (NumberFormatException e) {
                throw new Exception("La cédula del cliente debe ser un número válido");
            }
            
            // Buscar en sistema
            Empleado empleado = sistema.buscarEmpleadoPorCedula(cedulaEmpleado);
            if (empleado == null) {
                throw new Exception("El empleado seleccionado no existe");
            }

            Cliente cliente = sistema.buscarClientePorCedula(cedulaCliente);
            if (cliente == null) {
                throw new Exception("El cliente seleccionado no existe");
            }

            Vehiculo vehiculo = sistema.buscarVehiculoPorMatricula(matriculaVehiculo);
            if (vehiculo == null) {
                throw new Exception("El vehículo seleccionado no existe");
            }
            
            // Verificar unicidad
            if (sistema.vehiculoTieneContrato(vehiculo)) {
                throw new Exception("El vehículo ya tiene un contrato activo");
            }

            // Crear y registrar
            Contrato contrato = new Contrato(valorMensual, empleado, cliente, vehiculo, 0, fechaInicio);
            boolean resultado = sistema.registrarContrato(contrato);

            if (!resultado) {
                throw new Exception("No se pudo registrar el contrato");
            }

            actualizarListaContratos();
            
            ClaroOscuro.mostrarMensaje(this, "Contrato agregado con éxito", "Éxito");
            
            limpiarCampos();
            
        } catch (Exception e) {
            ClaroOscuro.mostrarError(this, e.getMessage(), "Error");
        }
        
    }//GEN-LAST:event_jButtonAgregarActionPerformed

    private void jButtonVaciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVaciarActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_jButtonVaciarActionPerformed

    private void jListContratosValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListContratosValueChanged
        if (!evt.getValueIsAdjusting()) {
            mostrarContratoSeleccionado();
        }
    }//GEN-LAST:event_jListContratosValueChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAgregar;
    private javax.swing.JButton jButtonVaciar;
    private javax.swing.JLabel jLabelClientes;
    private javax.swing.JLabel jLabelClientes1;
    private javax.swing.JLabel jLabelContratos;
    private javax.swing.JLabel jLabelContratos1;
    private javax.swing.JLabel jLabelContratos2;
    private javax.swing.JLabel jLabelContratos3;
    private javax.swing.JLabel jLabelContratos4;
    private javax.swing.JLabel jLabelContratos5;
    private javax.swing.JLabel jLabelContratos6;
    private javax.swing.JLabel jLabelEmpleados;
    private javax.swing.JLabel jLabelFechaInicio;
    private javax.swing.JLabel jLabelValorMensual;
    private javax.swing.JLabel jLabelVehiculos;
    private javax.swing.JList jListClientes;    
    private javax.swing.JList jListContratos;     
    private javax.swing.JList jListEmpleados;   
    private javax.swing.JList jListVehiculos;   
    private javax.swing.JPanel jPanelGestionContratos;
    private javax.swing.JScrollPane jScrollPaneClientes;
    private javax.swing.JScrollPane jScrollPaneContratos;
    private javax.swing.JScrollPane jScrollPaneEmpleados;
    private javax.swing.JScrollPane jScrollPaneVehiculos;
    private javax.swing.JTextField jTextFieldCliente;
    private javax.swing.JTextField jTextFieldEmpleado;
    private javax.swing.JTextField jTextFieldFechaInicio;
    private javax.swing.JTextField jTextFieldNumContrato;
    private javax.swing.JTextField jTextFieldValorMensual;
    private javax.swing.JTextField jTextFieldVehiculo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        // TODO Auto-generated method stub

        String propertyName = evt.getPropertyName();
        
        if ("contratoCreado".equals(propertyName) || "contratoEliminado".equals(propertyName)) {
            actualizarListaContratos();
        } 
        else if ("clienteCreado".equals(propertyName) || "clienteEliminado".equals(propertyName)) {
            actualizarListaClientes();
        } 
        else if ("vehiculoCreado".equals(propertyName) || "vehiculoEliminado".equals(propertyName)) {
            actualizarListaVehiculos();
        } 
        else if ("empleadoCreado".equals(propertyName) || "empleadoEliminado".equals(propertyName)) {
            actualizarListaEmpleados();
        }
    }
}
