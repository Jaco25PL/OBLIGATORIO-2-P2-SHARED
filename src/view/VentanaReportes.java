/**
 * Autores: [Matias Piedra 354007] y [Joaquin Piedra 304804]
 */
package view;

import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import model.Sistema;
import model.Entrada;
import model.Salida;
import model.ServicioAdicional;
import model.Vehiculo;
import util.ValidadorFechaHora;

public class VentanaReportes extends javax.swing.JFrame {

    private Sistema sistema;
    private ArrayList<Object> movimientosActuales;
    private String matricula;
    private javax.swing.ButtonGroup buttonGroupOrdenamiento;

    public VentanaReportes(Sistema sistema) {  
        this.sistema = sistema;

        initComponents();
        
        // Crear ButtonGroup para los radio buttons
        buttonGroupOrdenamiento = new javax.swing.ButtonGroup();
        buttonGroupOrdenamiento.add(jRadioButtonFechaHoraCreciente);
        buttonGroupOrdenamiento.add(jRadioButtonFechaHoraDecreciente);
        
        iniciarTabla();
        actualizarListaVehiculos();
        actualizarServiciosMasUtilizados();
        actualizarEmpleadosConMenosMovimientos();
        actualizarEstadiasMasLargas();
        actualizarClientesConMasVehiculos();
        
        jCheckBoxEntradas.setSelected(true);
        jCheckBoxSalidas.setSelected(true);
        jCheckBoxServicios.setSelected(true);
        jRadioButtonFechaHoraCreciente.setSelected(true);

        ClaroOscuro.aplicarModo(this);
        
        //Listener para la Lista
        jListVehiculos.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            @Override
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                if (!evt.getValueIsAdjusting()) {
                    mostrarVehiculoSeleccionado();
                }
            }
        });
        
        // Agregar listeners a todos los botones de la grilla
        agregarListenersBotonesmovimientos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelReportes = new javax.swing.JPanel();
        jTabbedPaneReportes = new javax.swing.JTabbedPane();
        jPanelHistorial = new javax.swing.JPanel();
        jScrollPaneVehiculos = new javax.swing.JScrollPane();
        jListVehiculos = new javax.swing.JList<>();
        jLabelListaDeVehiculos = new javax.swing.JLabel();
        jScrollPaneTable = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jLabelFiltrar = new javax.swing.JLabel();
        jCheckBoxEntradas = new javax.swing.JCheckBox();
        jCheckBoxSalidas = new javax.swing.JCheckBox();
        jCheckBoxServicios = new javax.swing.JCheckBox();
        jButtonExportar = new javax.swing.JButton();
        jLabelMovimientosDelVehiculo = new javax.swing.JLabel();
        jRadioButtonFechaHoraCreciente = new javax.swing.JRadioButton();
        jRadioButtonFechaHoraDecreciente = new javax.swing.JRadioButton();
        jLabelFiltrar1 = new javax.swing.JLabel();
        jPanelEstadisticas = new javax.swing.JPanel();
        jLabelServiciosMasUtilizados = new javax.swing.JLabel();
        jScrollPaneServiciosMasUtilizados = new javax.swing.JScrollPane();
        jListServiciosMasUtilizados = new javax.swing.JList<>();
        jLabelEmpleadosConMenosMovimientos = new javax.swing.JLabel();
        jScrollPaneEmpleadosConMenosMovimientos = new javax.swing.JScrollPane();
        jListEmpleadosConMenosMovimientos = new javax.swing.JList<>();
        jLabelEstadiaMasLarga = new javax.swing.JLabel();
        jLabelClientesConMasVehiculos = new javax.swing.JLabel();
        jScrollPaneEstadiasMasLargas = new javax.swing.JScrollPane();
        jListEstadiasMasLargas = new javax.swing.JList<>();
        jScrollPaneClientesConMasVehiculos = new javax.swing.JScrollPane();
        jListClientesConMasVehiculos = new javax.swing.JList<>();
        jPanelMovimientos = new javax.swing.JPanel();
        jLabelSeleccionFecha = new javax.swing.JLabel();
        jButtonActualizar = new javax.swing.JButton();
        jTextFieldFecha = new javax.swing.JTextField();
        jPanelBotones = new javax.swing.JPanel();
        jButtonHora1Dia1 = new javax.swing.JButton();
        jButtonHora1Dia2 = new javax.swing.JButton();
        jButtonHora1Dia3 = new javax.swing.JButton();
        jButtonHora2Dia1 = new javax.swing.JButton();
        jButtonHora2Dia2 = new javax.swing.JButton();
        jButtonHora2Dia3 = new javax.swing.JButton();
        jButtonHora3Dia1 = new javax.swing.JButton();
        jButtonHora3Dia2 = new javax.swing.JButton();
        jButtonHora3Dia3 = new javax.swing.JButton();
        jButtonHora4Dia1 = new javax.swing.JButton();
        jButtonHora4Dia2 = new javax.swing.JButton();
        jButtonHora4Dia3 = new javax.swing.JButton();
        jLabelHora18a00 = new javax.swing.JLabel();
        jLabelDia3 = new javax.swing.JLabel();
        jLabelDia2 = new javax.swing.JLabel();
        jLabelDia1 = new javax.swing.JLabel();
        jLabelHora0a6 = new javax.swing.JLabel();
        jLabelHora6a12 = new javax.swing.JLabel();
        jLabelHora12a18 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Reportes");
        getContentPane().setLayout(null);

        jPanelReportes.setLayout(null);

        jPanelHistorial.setLayout(null);

        jListVehiculos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPaneVehiculos.setViewportView(jListVehiculos);

        jPanelHistorial.add(jScrollPaneVehiculos);
        jScrollPaneVehiculos.setBounds(10, 40, 150, 130);

        jLabelListaDeVehiculos.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelListaDeVehiculos.setText("Lista de vehículos");
        jPanelHistorial.add(jLabelListaDeVehiculos);
        jLabelListaDeVehiculos.setBounds(10, 10, 120, 16);

        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPaneTable.setViewportView(jTable);

        jPanelHistorial.add(jScrollPaneTable);
        jScrollPaneTable.setBounds(170, 40, 370, 130);

        jLabelFiltrar.setText("Ordenar:");
        jPanelHistorial.add(jLabelFiltrar);
        jLabelFiltrar.setBounds(10, 180, 80, 16);

        jCheckBoxEntradas.setText("Entradas");
        jCheckBoxEntradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxEntradasActionPerformed(evt);
            }
        });
        jPanelHistorial.add(jCheckBoxEntradas);
        jCheckBoxEntradas.setBounds(270, 180, 90, 20);

        jCheckBoxSalidas.setText("Salidas");
        jCheckBoxSalidas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxSalidasActionPerformed(evt);
            }
        });
        jPanelHistorial.add(jCheckBoxSalidas);
        jCheckBoxSalidas.setBounds(270, 200, 90, 20);

        jCheckBoxServicios.setText("Servicios");
        jCheckBoxServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxServiciosActionPerformed(evt);
            }
        });
        jPanelHistorial.add(jCheckBoxServicios);
        jCheckBoxServicios.setBounds(270, 220, 90, 20);

        jButtonExportar.setText("Exportar");
        jButtonExportar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonExportarActionPerformed(evt);
            }
        });
        jPanelHistorial.add(jButtonExportar);
        jButtonExportar.setBounds(370, 180, 170, 30);

        jLabelMovimientosDelVehiculo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelMovimientosDelVehiculo.setText("Movimientos del vehículo seleccionado");
        jPanelHistorial.add(jLabelMovimientosDelVehiculo);
        jLabelMovimientosDelVehiculo.setBounds(170, 10, 220, 16);

        jRadioButtonFechaHoraCreciente.setText("Fecha/Hora Creciente");
        jRadioButtonFechaHoraCreciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFechaHoraCrecienteActionPerformed(evt);
            }
        });
        jPanelHistorial.add(jRadioButtonFechaHoraCreciente);
        jRadioButtonFechaHoraCreciente.setBounds(60, 180, 150, 21);

        jRadioButtonFechaHoraDecreciente.setText("Fecha/Hora Decreciente");
        jRadioButtonFechaHoraDecreciente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonFechaHoraDecrecienteActionPerformed(evt);
            }
        });
        jPanelHistorial.add(jRadioButtonFechaHoraDecreciente);
        jRadioButtonFechaHoraDecreciente.setBounds(60, 200, 160, 21);

        jLabelFiltrar1.setText("Filtrar:");
        jPanelHistorial.add(jLabelFiltrar1);
        jLabelFiltrar1.setBounds(230, 180, 50, 16);

        jTabbedPaneReportes.addTab("Historial", jPanelHistorial);

        jPanelEstadisticas.setLayout(null);

        jLabelServiciosMasUtilizados.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelServiciosMasUtilizados.setText("Servicios más utilizados");
        jPanelEstadisticas.add(jLabelServiciosMasUtilizados);
        jLabelServiciosMasUtilizados.setBounds(10, 10, 150, 16);

        jListServiciosMasUtilizados.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPaneServiciosMasUtilizados.setViewportView(jListServiciosMasUtilizados);

        jPanelEstadisticas.add(jScrollPaneServiciosMasUtilizados);
        jScrollPaneServiciosMasUtilizados.setBounds(10, 30, 250, 90);

        jLabelEmpleadosConMenosMovimientos.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelEmpleadosConMenosMovimientos.setText("Empleados con menos movimientos");
        jPanelEstadisticas.add(jLabelEmpleadosConMenosMovimientos);
        jLabelEmpleadosConMenosMovimientos.setBounds(280, 10, 210, 16);

        jListEmpleadosConMenosMovimientos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPaneEmpleadosConMenosMovimientos.setViewportView(jListEmpleadosConMenosMovimientos);

        jPanelEstadisticas.add(jScrollPaneEmpleadosConMenosMovimientos);
        jScrollPaneEmpleadosConMenosMovimientos.setBounds(280, 30, 260, 90);

        jLabelEstadiaMasLarga.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelEstadiaMasLarga.setText("Estadías más largas");
        jPanelEstadisticas.add(jLabelEstadiaMasLarga);
        jLabelEstadiaMasLarga.setBounds(280, 130, 190, 10);

        jLabelClientesConMasVehiculos.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabelClientesConMasVehiculos.setText("Clientes con más vehículos");
        jPanelEstadisticas.add(jLabelClientesConMasVehiculos);
        jLabelClientesConMasVehiculos.setBounds(10, 130, 180, 16);

        jListEstadiasMasLargas.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPaneEstadiasMasLargas.setViewportView(jListEstadiasMasLargas);

        jPanelEstadisticas.add(jScrollPaneEstadiasMasLargas);
        jScrollPaneEstadiasMasLargas.setBounds(280, 150, 260, 90);

        jListClientesConMasVehiculos.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPaneClientesConMasVehiculos.setViewportView(jListClientesConMasVehiculos);

        jPanelEstadisticas.add(jScrollPaneClientesConMasVehiculos);
        jScrollPaneClientesConMasVehiculos.setBounds(10, 150, 250, 90);

        jTabbedPaneReportes.addTab("Estadísticas Generales", jPanelEstadisticas);

        jPanelMovimientos.setLayout(null);

        jLabelSeleccionFecha.setText("Fecha:");
        jPanelMovimientos.add(jLabelSeleccionFecha);
        jLabelSeleccionFecha.setBounds(10, 10, 100, 16);

        jButtonActualizar.setText("Actualizar");
        jButtonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonActualizarActionPerformed(evt);
            }
        });
        jPanelMovimientos.add(jButtonActualizar);
        jButtonActualizar.setBounds(180, 10, 100, 27);
        jPanelMovimientos.add(jTextFieldFecha);
        jTextFieldFecha.setBounds(60, 10, 110, 26);

        jPanelBotones.setLayout(new java.awt.GridLayout(4, 3, 5, 5));

        jButtonHora1Dia1.setText("Hora 1 - Dia 1");
        jPanelBotones.add(jButtonHora1Dia1);

        jButtonHora1Dia2.setText("Hora 1 - Dia 2");
        jPanelBotones.add(jButtonHora1Dia2);

        jButtonHora1Dia3.setText("Hora 1 - Dia 3");
        jPanelBotones.add(jButtonHora1Dia3);

        jButtonHora2Dia1.setText("Hora 2 - Dia 1");
        jPanelBotones.add(jButtonHora2Dia1);

        jButtonHora2Dia2.setText("Hora 2 - Dia 2");
        jPanelBotones.add(jButtonHora2Dia2);

        jButtonHora2Dia3.setText("Hora 2 - Dia 3");
        jPanelBotones.add(jButtonHora2Dia3);

        jButtonHora3Dia1.setText("Hora 3 - Dia 1");
        jPanelBotones.add(jButtonHora3Dia1);

        jButtonHora3Dia2.setText("Hora 3 - Dia 2");
        jPanelBotones.add(jButtonHora3Dia2);

        jButtonHora3Dia3.setText("Hora 3 - Dia 3");
        jPanelBotones.add(jButtonHora3Dia3);

        jButtonHora4Dia1.setText("Hora 4 - Dia 1");
        jPanelBotones.add(jButtonHora4Dia1);

        jButtonHora4Dia2.setText("Hora 4 - Dia 2");
        jPanelBotones.add(jButtonHora4Dia2);

        jButtonHora4Dia3.setText("Hora 4 - Dia 3");
        jPanelBotones.add(jButtonHora4Dia3);

        jPanelMovimientos.add(jPanelBotones);
        jPanelBotones.setBounds(80, 70, 460, 160);

        jLabelHora18a00.setText("18:00-23:59");
        jPanelMovimientos.add(jLabelHora18a00);
        jLabelHora18a00.setBounds(10, 200, 70, 16);

        jLabelDia3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDia3.setText("Día 3");
        jPanelMovimientos.add(jLabelDia3);
        jLabelDia3.setBounds(390, 50, 150, 16);

        jLabelDia2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDia2.setText("Día 2");
        jPanelMovimientos.add(jLabelDia2);
        jLabelDia2.setBounds(240, 50, 140, 16);

        jLabelDia1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabelDia1.setText("Día 1");
        jLabelDia1.setToolTipText("");
        jPanelMovimientos.add(jLabelDia1);
        jLabelDia1.setBounds(90, 50, 130, 16);

        jLabelHora0a6.setText("00:00-05:59");
        jPanelMovimientos.add(jLabelHora0a6);
        jLabelHora0a6.setBounds(10, 80, 70, 16);

        jLabelHora6a12.setText("06:00-11:59");
        jPanelMovimientos.add(jLabelHora6a12);
        jLabelHora6a12.setBounds(10, 120, 70, 16);

        jLabelHora12a18.setText("12:00-17:59");
        jPanelMovimientos.add(jLabelHora12a18);
        jLabelHora12a18.setBounds(10, 160, 70, 16);

        jTabbedPaneReportes.addTab("Movimientos", jPanelMovimientos);

        jPanelReportes.add(jTabbedPaneReportes);
        jTabbedPaneReportes.setBounds(10, 10, 550, 270);

        getContentPane().add(jPanelReportes);
        jPanelReportes.setBounds(0, 0, 570, 320);

        setBounds(0, 0, 584, 329);
    }// </editor-fold>//GEN-END:initComponents

    private void iniciarTabla(){
        String[] columnas = {"Tipo", "Fecha", "Hora", "Detalles"};
        DefaultTableModel modelo = new DefaultTableModel(columnas, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // esto hace que la table no se pueda editar
            }
        };
        jTable.setModel(modelo);
        
    }
    
    private void actualizarListaVehiculos() {
        ArrayList<Vehiculo> vehiculos = sistema.getListaVehiculos();
        DefaultListModel<String> modelo = new DefaultListModel<>();

        for (int i = 0; i < vehiculos.size(); i++) {
            Vehiculo vehiculo = vehiculos.get(i);
            modelo.addElement(vehiculo.getMarca() + " " + vehiculo.getModelo() + " - " + vehiculo.getMatricula());
        }

        jListVehiculos.setModel(modelo);
    }
    
    private void actualizarServiciosMasUtilizados() {
        ArrayList<String> serviciosMasUtilizados = sistema.getServiciosMasUtilizados();
        DefaultListModel<String> modelo = new DefaultListModel<>();

        for (int i = 0; i < serviciosMasUtilizados.size(); i++) {
            modelo.addElement(serviciosMasUtilizados.get(i));
        }

        jListServiciosMasUtilizados.setModel(modelo);
    }
    
    private void actualizarEmpleadosConMenosMovimientos() {
        ArrayList<String> empleadosMenosMovimientos = sistema.getEmpleadosConMenosMovimientos();
        DefaultListModel<String> modelo = new DefaultListModel<>();

        for (int i = 0; i < empleadosMenosMovimientos.size(); i++) {
            modelo.addElement(empleadosMenosMovimientos.get(i));
        }

        jListEmpleadosConMenosMovimientos.setModel(modelo);
    }
    
    private void actualizarEstadiasMasLargas() {
        ArrayList<String> estadiasMasLargas = sistema.getEstadiasMasLargas();
        DefaultListModel<String> modelo = new DefaultListModel<>();

        for (int i = 0; i < estadiasMasLargas.size(); i++) {
            modelo.addElement(estadiasMasLargas.get(i));
        }

        jListEstadiasMasLargas.setModel(modelo);
    }
    
    private void actualizarClientesConMasVehiculos() {
        ArrayList<String> clientesConMasVehiculos = sistema.getClientesConMasVehiculos();
        DefaultListModel<String> modelo = new DefaultListModel<>();

        for (int i = 0; i < clientesConMasVehiculos.size(); i++) {
            modelo.addElement(clientesConMasVehiculos.get(i));
        }

        jListClientesConMasVehiculos.setModel(modelo);
    }
    
    public void mostrarVehiculoSeleccionado(){
        String seleccionado = jListVehiculos.getSelectedValue();
        
        if (seleccionado != null) {
            try {
                matricula = seleccionado.split(" - ")[1];
                actualizarTabla();
            } catch (Exception e) {
                ClaroOscuro.mostrarError(this, "Error al cargar datos del vehiculo: " + e.getMessage(), "Error");
            }
        }
    }
    
    public void actualizarTabla(){
        ArrayList<Object> movimientos = sistema.getMovimientosVehiculo(matricula);
        
        // Fitrar
        boolean entradas = jCheckBoxEntradas.isSelected();
        boolean salidas = jCheckBoxSalidas.isSelected();
        boolean servicios = jCheckBoxServicios.isSelected();
        movimientos = sistema.filtrarMovimientos(movimientos, entradas, salidas, servicios);
        
        //Ordenar
        boolean ascendente = jRadioButtonFechaHoraCreciente.isSelected();
        movimientos = sistema.ordenarMovimientos(movimientos, ascendente);
        
        // Guarda movimientos para exportar
        this.movimientosActuales = movimientos;
        
        //Actualiza la tabla
        DefaultTableModel modelo = (DefaultTableModel) jTable.getModel();
        modelo.setRowCount(0); // esto limpia la tabla
        
        for (int i = 0; i < movimientos.size(); i++) {
            Object movimiento = movimientos.get(i);
            
            String tipo = "";
            String fecha = "";
            String hora = "";
            String detalles = "";
            
            if (movimiento instanceof Entrada) {
                Entrada entrada = (Entrada) movimiento;
                tipo = "ENTRADA";
                fecha = entrada.getFecha();
                hora = entrada.getHora();
                detalles = "Empleado: " + entrada.getEmpleado().getNombre();
                if (!entrada.getNota().isEmpty()) {
                    detalles += " - Notas: " + entrada.getNota();
                }
            } else if (movimiento instanceof Salida) {
                Salida salida = (Salida) movimiento;
                tipo = "SALIDA";
                fecha = salida.getFecha();
                hora = salida.getHora();
                detalles = "Empleado: " + salida.getEmpleado().getNombre();
                if (!salida.getNota().isEmpty()) {
                    detalles += " - Notas: " + salida.getNota();
                }
                
                // Agregar tiempo en parking con manejo de error
                try {
                    // Verificar que la entrada no sea nula
                    if (salida.getEntrada() != null) {
                        detalles += " - Tiempo en parking: " + 
                                sistema.calcularDiferenciaTiempo(
                                    salida.getEntrada().getFecha(),
                                    salida.getEntrada().getHora(),
                                    salida.getFecha(),
                                    salida.getHora());
                    }
                } catch (Exception e) {
                    detalles += " - Tiempo en parking: No disponible";
                    System.err.println("Error al calcular tiempo en parking: " + e.getMessage());
                }
            } else if (movimiento instanceof ServicioAdicional) {
                ServicioAdicional servicio = (ServicioAdicional) movimiento;
                tipo = "SERVICIO";
                fecha = servicio.getFecha();
                hora = servicio.getHora();
                detalles = servicio.getTipoServicio() + " $" + servicio.getCostoServicio() 
                        + " Empleado: " + servicio.getEmpleado().getNombre();
            }
            
            modelo.addRow(new Object[]{tipo, fecha, hora, detalles});
        }
    }
    
    private void jRadioButtonFechaHoraDecrecienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonFechaHoraDecrecienteActionPerformed
        if (matricula != null) {
            actualizarTabla();
        }
    }//GEN-LAST:event_jRadioButtonFechaHoraDecrecienteActionPerformed

    private void jRadioButtonFechaHoraCrecienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonFechaHoraCrecienteActionPerformed
        if (matricula != null) {
            actualizarTabla();
        }
    }//GEN-LAST:event_jRadioButtonFechaHoraCrecienteActionPerformed

    private void jCheckBoxEntradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxEntradasActionPerformed
        if (matricula != null) {
            actualizarTabla();
        }
    }//GEN-LAST:event_jCheckBoxEntradasActionPerformed

    private void jCheckBoxSalidasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxSalidasActionPerformed
        if (matricula != null) {
            actualizarTabla();
        }
    }//GEN-LAST:event_jCheckBoxSalidasActionPerformed

    private void jCheckBoxServiciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxServiciosActionPerformed
        if (matricula != null) {
            actualizarTabla();
        }
    }//GEN-LAST:event_jCheckBoxServiciosActionPerformed

    private void jButtonExportarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonExportarActionPerformed
        if (matricula != null && movimientosActuales != null && !movimientosActuales.isEmpty()) {
            sistema.exportarMovimientosATxt(movimientosActuales, matricula);
            ClaroOscuro.mostrarMensaje(this, "Archivo " + matricula + ".txt generado con éxito", "Exportación Exitosa");
        } else {
            ClaroOscuro.mostrarError(this, "No hay datos para exportar", "Error");
        }
    }//GEN-LAST:event_jButtonExportarActionPerformed

    //MOVIMIENTOS

    
    private void jButtonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonActualizarActionPerformed
        try {
            String fecha = jTextFieldFecha.getText().trim();
            
            // Validar formato de fecha usando ValidadorFechaHora
            ValidadorFechaHora.validarFecha(fecha);
            
            // Actualizar los botones con los datos de movimientos
            actualizarBotonesMovimientos(fecha);
            
        } catch (Exception e) {
            ClaroOscuro.mostrarError(this, "Error: " + e.getMessage(), "Error");
        }
    }//GEN-LAST:event_jButtonActualizarActionPerformed
    
    private void actualizarBotonesMovimientos(String fecha) {
        // Calcular las fechas para las tres columnas
        String fecha1 = fecha;
        String fecha2 = calcularFechaSiguiente(fecha, 1);
        String fecha3 = calcularFechaSiguiente(fecha, 2);

        // Actualizar cada botón con su color correspondiente
        actualizarBoton(jButtonHora1Dia1, fecha1, 0);
        actualizarBoton(jButtonHora1Dia2, fecha2, 0);
        actualizarBoton(jButtonHora1Dia3, fecha3, 0);

        actualizarBoton(jButtonHora2Dia1, fecha1, 1);
        actualizarBoton(jButtonHora2Dia2, fecha2, 1);
        actualizarBoton(jButtonHora2Dia3, fecha3, 1);

        actualizarBoton(jButtonHora3Dia1, fecha1, 2);
        actualizarBoton(jButtonHora3Dia2, fecha2, 2);
        actualizarBoton(jButtonHora3Dia3, fecha3, 2);

        actualizarBoton(jButtonHora4Dia1, fecha1, 3);
        actualizarBoton(jButtonHora4Dia2, fecha2, 3);
        actualizarBoton(jButtonHora4Dia3, fecha3, 3);

        // Actualizar etiquetas de días
        jLabelDia1.setText("Día 1: " + fecha1);
        jLabelDia2.setText("Día 2: " + fecha2);
        jLabelDia3.setText("Día 3: " + fecha3);
    }
    
    private void actualizarBoton(javax.swing.JButton boton, String fecha, int indiceHora) {
        // Obtener rango de horas
        int horaInicio = obtenerHoraInicio(indiceHora);
        int horaFin = obtenerHoraFin(indiceHora);

        // Obtener movimientos para este período
        ArrayList<Object> movimientos = obtenerMovimientosPorPeriodo(fecha, horaInicio, horaFin);

        // Determinar color según cantidad de movimientos
        int cantidadMovimientos = movimientos.size();
        java.awt.Color color;

        if (cantidadMovimientos < 5) {
            color = java.awt.Color.GREEN;
        } else if (cantidadMovimientos <= 8) {
            color = java.awt.Color.YELLOW;
        } else {
            color = java.awt.Color.RED;
        }        // Actualizar texto y color del botón
        boton.setText(cantidadMovimientos + " mov.");
        boton.setBackground(color);
        
        // Marcar como botón de grilla para que no se modifique su color de fondo
        boton.putClientProperty("esBotonGrilla", true);

        // Guardar los datos del botón para usarlos cuando se haga clic
        boton.putClientProperty("fecha", fecha);
        boton.putClientProperty("indiceHora", indiceHora);
        boton.putClientProperty("movimientos", movimientos);
    }
    
    private ArrayList<Object> obtenerMovimientosPorPeriodo(String fecha, int horaInicio, int horaFin) {
        ArrayList<Object> movimientosPeriodo = new ArrayList<>();
        ArrayList<Object> todosLosMovimientos = obtenerTodosLosMovimientos();
        
        for (int i = 0; i < todosLosMovimientos.size(); i++) {
            Object movimiento = todosLosMovimientos.get(i);
            
            String fechaMovimiento = "";
            String horaMovimiento = "";
            
            if (movimiento instanceof Entrada) {
                Entrada entrada = (Entrada) movimiento;
                fechaMovimiento = entrada.getFecha();
                horaMovimiento = entrada.getHora();
            } else if (movimiento instanceof Salida) {
                Salida salida = (Salida) movimiento;
                fechaMovimiento = salida.getFecha();
                horaMovimiento = salida.getHora();
            } else if (movimiento instanceof ServicioAdicional) {
                ServicioAdicional servicio = (ServicioAdicional) movimiento;
                fechaMovimiento = servicio.getFecha();
                horaMovimiento = servicio.getHora();
            }
            
            // Verificar si la fecha coincide
            if (fechaMovimiento.equals(fecha)) {
                // Obtener hora como entero
                int hora = Integer.parseInt(horaMovimiento.split(":")[0]);
                
                // Verificar si está en el rango horario
                if (hora >= horaInicio && hora < horaFin) {
                    movimientosPeriodo.add(movimiento);
                }
            }
        }
        
        // Ordenar los movimientos por fecha y hora
        movimientosPeriodo = sistema.ordenarMovimientos(movimientosPeriodo, true);
        
        return movimientosPeriodo;
    }

    private ArrayList<Object> obtenerTodosLosMovimientos() {
        ArrayList<Object> movimientos = new ArrayList<>();
        
        // Agregar todas las entradas
        for (int i = 0; i < sistema.getListaEntradas().size(); i++) {
            movimientos.add(sistema.getListaEntradas().get(i));
        }
        
        // Agregar todas las salidas
        for (int i = 0; i < sistema.getListaSalidas().size(); i++) {
            movimientos.add(sistema.getListaSalidas().get(i));
        }
        
        // Agregar todos los servicios adicionales
        for (int i = 0; i < sistema.getListaServiciosAdicionales().size(); i++) {
            movimientos.add(sistema.getListaServiciosAdicionales().get(i));
        }
        
        return movimientos;
    }

    private String calcularFechaSiguiente(String fecha, int diasSumar) {
        // Parsear la fecha entrada a formato: dd/mm/yyyy
        String[] partesFecha = fecha.split("/");
        int dia = Integer.parseInt(partesFecha[0]);
        int mes = Integer.parseInt(partesFecha[1]);
        int anio = Integer.parseInt(partesFecha[2]);
        
        // Crear objeto LocalDate y sumar los días
        java.time.LocalDate fechaLocal = java.time.LocalDate.of(anio, mes, dia);
        java.time.LocalDate fechaSiguiente = fechaLocal.plusDays(diasSumar);
        
        // Formatear la fecha resultado a dd/mm/yyyy
        return String.format("%02d/%02d/%04d", 
                fechaSiguiente.getDayOfMonth(), 
                fechaSiguiente.getMonthValue(), 
                fechaSiguiente.getYear());
    }

    private String obtenerRangoHorario(int indiceHora) {
        String rangoHorario = "";
        
        if (indiceHora == 0) {
            rangoHorario = "00:00-05:59";
        } else if (indiceHora == 1) {
            rangoHorario = "06:00-11:59";
        } else if (indiceHora == 2) {
            rangoHorario = "12:00-17:59";
        } else if (indiceHora == 3) {
            rangoHorario = "18:00-23:59";
        }
        
        return rangoHorario;
    }

    private int obtenerHoraInicio(int indiceHora) {
        int horaInicio = 0;
        
        if (indiceHora == 0) {
            horaInicio = 0;
        } else if (indiceHora == 1) {
            horaInicio = 6;
        } else if (indiceHora == 2) {
            horaInicio = 12;
        } else if (indiceHora == 3) {
            horaInicio = 18;
        }
        
        return horaInicio;
    }

    private int obtenerHoraFin(int indiceHora) {
        int horaFin = 0;
        
        if (indiceHora == 0) {
            horaFin = 6;
        } else if (indiceHora == 1) {
            horaFin = 12;
        } else if (indiceHora == 2) {
            horaFin = 18;
        } else if (indiceHora == 3) {
            horaFin = 24;
        }
        
        return horaFin;
    }

    // Método para agregar listeners a los botones
    private void agregarListenersBotonesmovimientos() {
        // Primera fila
        jButtonHora1Dia1.addActionListener(new MovListener());
        jButtonHora1Dia2.addActionListener(new MovListener());
        jButtonHora1Dia3.addActionListener(new MovListener());
        
        // Segunda fila
        jButtonHora2Dia1.addActionListener(new MovListener());
        jButtonHora2Dia2.addActionListener(new MovListener());
        jButtonHora2Dia3.addActionListener(new MovListener());
        
        // Tercera fila
        jButtonHora3Dia1.addActionListener(new MovListener());
        jButtonHora3Dia2.addActionListener(new MovListener());
        jButtonHora3Dia3.addActionListener(new MovListener());
        
        // Cuarta fila
        jButtonHora4Dia1.addActionListener(new MovListener());
        jButtonHora4Dia2.addActionListener(new MovListener());
        jButtonHora4Dia3.addActionListener(new MovListener());
    }

    // Clase interna para manejar los eventos de los botones, según la consigna
    private class MovListener implements java.awt.event.ActionListener {
        public void actionPerformed(java.awt.event.ActionEvent e) {
            // este código se ejecutará al presionar el botón, obtengo cuál botón
            javax.swing.JButton cual = ((javax.swing.JButton) e.getSource());
            
            try {                // Recuperar datos guardados en el botón
                String fecha = (String) cual.getClientProperty("fecha");
                Integer indiceHoraObj = (Integer) cual.getClientProperty("indiceHora");
                @SuppressWarnings("unchecked")
                ArrayList<Object> movimientos = (ArrayList<Object>) cual.getClientProperty("movimientos");
                
                // Verificar que todos los datos necesarios estén presentes
                if (fecha == null || indiceHoraObj == null || movimientos == null) {
                    ClaroOscuro.mostrarAdvertencia(VentanaReportes.this, 
                            "Por favor, ingrese una fecha y presione 'Actualizar' antes de usar los botones de la grilla.", 
                            "Datos no inicializados");
                    return;
                }
                
                int indiceHora = indiceHoraObj.intValue();
                
                // Mostrar ventana emergente con los movimientos
                mostrarVentanaMovimientos(fecha, indiceHora, movimientos);
                
            } catch (Exception ex) {
                ClaroOscuro.mostrarError(VentanaReportes.this, 
                        "Error al mostrar los movimientos: " + ex.getMessage(), 
                        "Error");
            }
        }
    }

    private void mostrarVentanaMovimientos(String fecha, int indiceHora, ArrayList<Object> movimientos) {
        String rangoHorario = obtenerRangoHorario(indiceHora);
        
        // Crear y mostrar la ventana de movimientos
        VentanaMovimientos ventana = new VentanaMovimientos(
                this, true, movimientos, fecha, rangoHorario);
        ventana.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonActualizar;
    private javax.swing.JButton jButtonExportar;
    private javax.swing.JButton jButtonHora1Dia1;
    private javax.swing.JButton jButtonHora1Dia2;
    private javax.swing.JButton jButtonHora1Dia3;
    private javax.swing.JButton jButtonHora2Dia1;
    private javax.swing.JButton jButtonHora2Dia2;
    private javax.swing.JButton jButtonHora2Dia3;
    private javax.swing.JButton jButtonHora3Dia1;
    private javax.swing.JButton jButtonHora3Dia2;
    private javax.swing.JButton jButtonHora3Dia3;
    private javax.swing.JButton jButtonHora4Dia1;
    private javax.swing.JButton jButtonHora4Dia2;
    private javax.swing.JButton jButtonHora4Dia3;
    private javax.swing.JCheckBox jCheckBoxEntradas;
    private javax.swing.JCheckBox jCheckBoxSalidas;
    private javax.swing.JCheckBox jCheckBoxServicios;
    private javax.swing.JLabel jLabelClientesConMasVehiculos;
    private javax.swing.JLabel jLabelDia1;
    private javax.swing.JLabel jLabelDia2;
    private javax.swing.JLabel jLabelDia3;
    private javax.swing.JLabel jLabelEmpleadosConMenosMovimientos;
    private javax.swing.JLabel jLabelEstadiaMasLarga;
    private javax.swing.JLabel jLabelFiltrar;
    private javax.swing.JLabel jLabelFiltrar1;
    private javax.swing.JLabel jLabelHora0a6;
    private javax.swing.JLabel jLabelHora12a18;
    private javax.swing.JLabel jLabelHora18a00;
    private javax.swing.JLabel jLabelHora6a12;
    private javax.swing.JLabel jLabelListaDeVehiculos;
    private javax.swing.JLabel jLabelMovimientosDelVehiculo;
    private javax.swing.JLabel jLabelSeleccionFecha;
    private javax.swing.JLabel jLabelServiciosMasUtilizados;
    private javax.swing.JList<String> jListClientesConMasVehiculos;
    private javax.swing.JList<String> jListEmpleadosConMenosMovimientos;
    private javax.swing.JList<String> jListEstadiasMasLargas;
    private javax.swing.JList<String> jListServiciosMasUtilizados;
    private javax.swing.JList<String> jListVehiculos;
    private javax.swing.JPanel jPanelBotones;
    private javax.swing.JPanel jPanelEstadisticas;
    private javax.swing.JPanel jPanelHistorial;
    private javax.swing.JPanel jPanelMovimientos;
    private javax.swing.JPanel jPanelReportes;
    private javax.swing.JRadioButton jRadioButtonFechaHoraCreciente;
    private javax.swing.JRadioButton jRadioButtonFechaHoraDecreciente;
    private javax.swing.JScrollPane jScrollPaneClientesConMasVehiculos;
    private javax.swing.JScrollPane jScrollPaneEmpleadosConMenosMovimientos;
    private javax.swing.JScrollPane jScrollPaneEstadiasMasLargas;
    private javax.swing.JScrollPane jScrollPaneServiciosMasUtilizados;
    private javax.swing.JScrollPane jScrollPaneTable;
    private javax.swing.JScrollPane jScrollPaneVehiculos;
    private javax.swing.JTabbedPane jTabbedPaneReportes;
    private javax.swing.JTable jTable;
    private javax.swing.JTextField jTextFieldFecha;
    // End of variables declaration//GEN-END:variables
}
